{"ast":null,"code":"export class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  _getHeaders() {\n    const token = localStorage.getItem('token');\n    return {\n      Authorization: `Bearer ${token}`,\n      ...this._headers\n    };\n  }\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._getHeaders()\n    }).then(this._checkResponse);\n  }\n  getInfoUser() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._getHeaders()\n    }).then(this._checkResponse);\n  }\n  //TODO: check update\n  updateUserInfo(userData) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._getHeaders(),\n      body: JSON.stringify(userData)\n    }).then(this._checkResponse);\n  }\n  addNewCard(newCardData) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._getHeaders(),\n      body: JSON.stringify({\n        name: newCardData.description,\n        link: newCardData.image\n      })\n    }).then(this._checkResponse);\n  }\n  //TODO: check on card id\n  addLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._getHeaders()\n    }).then(this._checkResponse);\n  }\n  removeLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._getHeaders()\n    }).then(this._checkResponse);\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._getHeaders()\n    }).then(this._checkResponse);\n  }\n  updateUserAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._getHeaders(),\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n  _checkResponse(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n    return res.json();\n  }\n}\nexport const api = new Api({\n  // baseUrl: 'https://api.mstar.students.nomoredomainsmonster.ru',\n  baseUrl: 'http://localhost:3000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_getHeaders","token","localStorage","getItem","Authorization","getInitialCards","fetch","method","then","_checkResponse","getInfoUser","updateUserInfo","userData","body","JSON","stringify","addNewCard","newCardData","name","description","link","image","addLike","cardId","removeLike","deleteCard","updateUserAvatar","data","avatar","res","ok","Promise","reject","status","json","api"],"sources":["/Users/mariahudakova/Desktop/practicum/dev/react-mesto-api-full-gha/frontend/src/utils/Api.js"],"sourcesContent":["export class Api {\n  constructor({ baseUrl, headers}) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _getHeaders() {\n    const token = localStorage.getItem('token');\n    return {\n      Authorization: `Bearer ${token}`,\n      ...this._headers,\n    };\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._getHeaders(),\n    }).then(this._checkResponse);\n  }\n\n  getInfoUser() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._getHeaders(),\n    }).then(this._checkResponse);\n  }\n//TODO: check update\n  updateUserInfo(userData) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._getHeaders(),\n      body: JSON.stringify(userData)\n    }).then(this._checkResponse);\n  }\n\n  addNewCard(newCardData) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers:this._getHeaders(),\n      body: JSON.stringify({\n        name: newCardData.description,\n        link: newCardData.image\n      })\n    }).then(this._checkResponse);\n  }\n//TODO: check on card id\n  addLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._getHeaders(),\n    }).then(this._checkResponse);\n  }\n\n  removeLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._getHeaders(),\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._getHeaders(),\n    }).then(this._checkResponse);\n  }\n\n  updateUserAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._getHeaders(),\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n\n  _checkResponse(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n    return res.json();\n  }\n}\n\nexport const api = new Api({\n  // baseUrl: 'https://api.mstar.students.nomoredomainsmonster.ru',\n  baseUrl: 'http://localhost:3000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}